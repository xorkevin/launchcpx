#!/bin/sh

set -e

if [ -z $FLIGHTCTL_ROOT ]; then
  echo "Run flightctl"
  exit 1
fi

. "${FLIGHTCTL_ROOT}/_flightctl_lib.sh"

usage() {
  cat <<EOF 1>&2
USAGE:
    $BIN_NAME [OPTIONS] <name>

OPTIONS:
    -n <namespace>
        Use the kubernetes namespace.
        Default is default.
    -t <ttl>
        Time to live duration of vault kube role token.
        Default is 1h.
    -m <maxttl>
        Max time to live duration of vault kube role token.
        Default is 24h.
    -k <directory>
        Read config from directory.
        Default is the current directory.
    -d
        Disconnect from vault.
    -h
        Print this help.

ARGS:
    <name>
        The name of the application.
EOF
}

usage_exit() {
  usage
  exit 2
}

ns='default'
ttl='1h'
maxttl='24h'
kdir='.'
name=
disconnect=

while getopts ':n:t:m:k:dh' opt; do
  case $opt in
    n) ns="$OPTARG";;
    t) ttl="$OPTARG";;
    m) maxttl="$OPTARG";;
    k) kdir="$OPTARG";;
    d) disconnect="1";;
    h) usage; exit 0;;
    *) usage_exit;;
  esac
done
shift $(($OPTIND - 1))
name="$1"

# validation
if [ -z $name ]; then
  usage_exit
fi

appname=${ns}-${name}
role=${appname}-role

if [ ! -z $disconnect ]; then
  vault policy delete ${appname}
  vault delete auth/kubernetes/role/${role}
  exit 0
fi

if [ ! -d $kdir ]; then
  echo "$kdir is not a directory." 1>&2
  exit 1
fi

policydir=${kdir}/policy
if [ -d $policydir ]; then
  policyfiles=$(find $policydir -type f -name '*.policy.hcl')
  cat $policyfiles | vault policy write ${appname} -
fi

vault write auth/kubernetes/role/${role} \
  bound_service_account_names="$name" \
  bound_service_account_namespaces="$ns" \
  policies="$appname" \
  ttl="$ttl" \
  max_ttl="$maxttl"

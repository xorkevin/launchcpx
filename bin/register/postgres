#!/bin/sh

set -e

if [ -z $FLIGHTCTL_ROOT ]; then
  echo "Run flightctl"
  exit 1
fi

. "${FLIGHTCTL_ROOT}/_flightctl_lib.sh"

usage() {
  cat <<EOF 1>&2
USAGE:
    $BIN_NAME [OPTIONS] <name>

OPTIONS:
    -n <namespace>
        Use the kubernetes namespace.
        Default is default.
    -t <ttl>
        Time to live duration of vault access tokens.
        Default is 1h.
    -m <maxttl>
        Max time to live duration of vault access tokens.
        Default is 24h.
    -e
        Register with vault db engine
    -f
        Force reregister with vault even if already registered.
    -d
        Deregister role.
    -h
        Print this help.

ARGS:
    <name>
        The name of the postgres service.
EOF
}

usage_exit() {
  usage
  exit 2
}

ns='default'
ttl='1h'
maxttl='24h'
name=
engine=
force=
deregister=

while getopts ':n:t:m:efdh' opt; do
  case $opt in
    n) ns="$OPTARG";;
    t) ttl="$OPTARG";;
    m) maxttl="$OPTARG";;
    e) engine="1";;
    f) force="1";;
    d) deregister="1";;
    h) usage; exit 0;;
    *) usage_exit;;
  esac
done
shift $(($OPTIND - 1))
name="$1"

# validation
if [ -z $name ]; then
  usage_exit
fi

svcname=${name}-postgres
appname=${ns}-${name}
role=${appname}-role
rolero=${appname}-ro
kvpath="kv/data/infra/${ns}/${name}"

if [ ! -z $deregister ]; then
  vault delete database/config/${appname}
  vault policy delete ${appname}
  vault delete auth/kubernetes/role/${role}
  vault delete database/roles/${role}
  vault delete database/roles/${rolero}
  exit 0
fi

if [ -z $force ] && (vault read database/config/${appname} >/dev/null 2>&1); then
  echo "Already registered ${appname} with vault" 1>&2
  exit 1
fi

if [ ! -z $engine ]; then
  password=$(vault kv get -format=json $kvpath | jq -r '.password')

  if [ -z $password ]; then
    echo "Postgres db password not yet initialized" 1>&2
    exit 1
  fi

  vault write database/config/${appname} \
    plugin_name="postgresql-database-plugin" \
    allowed_roles="${role},${rolero}" \
    connection_url="postgresql://{{username}}:{{password}}@${svcname}.${ns}.svc.cluster.local:5432/postgres?sslmode=disable" \
    username="postgres" \
    password="${password}"
fi

vault policy write ${appname} - <<EOF
path "${kvpath}" {
  capabilities = ["create", "update", "read"]
}
EOF

vault write auth/kubernetes/role/${role} \
  bound_service_account_names="${name}-postgres" \
  bound_service_account_namespaces="$ns" \
  policies="$appname" \
  ttl="1m" \
  max_ttl="5m"

vault write database/roles/${role} \
  db_name="${appname}" \
  creation_statements="@${FLIGHTCTL_ROOT}/data/postgres/rolecreate.sql" \
  revocation_statements="@${FLIGHTCTL_ROOT}/data/postgres/rolerevoke.sql" \
  default_ttl="${ttl}" \
  max_ttl="${maxttl}"

vault write database/roles/${rolero} \
  db_name="${appname}" \
  creation_statements="@${FLIGHTCTL_ROOT}/data/postgres/rolerocreate.sql" \
  revocation_statements="@${FLIGHTCTL_ROOT}/data/postgres/rolerevoke.sql" \
  default_ttl="${ttl}" \
  max_ttl="${maxttl}"

#!/usr/bin/env bash

set -e

if [ -z $FLIGHTCTL_ROOT ]; then
  echo "Run flightctl"
  exit 1
fi


. "$FLIGHTCTL_ROOT/_flightctl_lib.sh"

usage() {
  cat <<EOF 1>&2
USAGE:
    $BIN_NAME [OPTIONS] <name>

OPTIONS:
    -n <namespace>
        Use the kubernetes namespace.
    -c <init script dir>
        Add init script directory containing *.sql and *.sh files.
    -l <length>
        Change the generated password length in terms of bytes of randomness.
        Default is 32.
    -o <directory>
        Output config to directory.
        Default is the current directory.
    -d
        Dry run. Do not output files.
    -h
        Print this help.

ARGS:
    <name>
        The name prefixes all resources of the postgres deployment.
EOF
}

usage_exit() {
  usage
  exit 2
}

ns=
configdir=
passlen=32
outdir=.
name=
dryrun=

while getopts ':n:c:l:o:dh' opt; do
 case $opt in
   n) ns="$OPTARG";;
   c) configdir="$OPTARG";;
   l) passlen=$OPTARG;;
   o) outdir="$OPTARG";;
   d) dryrun="1";;
   h) usage; exit 0;;
   *) usage_exit;;
 esac
done
shift $(($OPTIND - 1))
name="$1"
configfiles=

# validation
if [ -z $name ]; then
  usage_exit
fi

if [ ! -z $configdir ]; then
  if [ ! -d $configdir ]; then
    echo "$configdir is not a directory." 1>&2
    exit 1
  fi
  configfiles=$(find $configdir -type f \( -name '*.sql' -o -name '*.sh' \))
fi

if [ ! -z $dryrun ]; then
  echo "DRY RUN" 1>&2
fi

if [ -z $dryrun ]; then
  mkdir -p $outdir
fi

passfile=dbpass
if [ -z $dryrun ]; then
  # create password file ifne
  passpath="$outdir/$passfile"
  if [ ! -e $passpath ]; then
    gen_pass $passlen > $passpath
  fi
fi

if [ -z $dryrun ]; then
  outfile=$outdir/kustomization.yaml
  exec 3>$outfile
else
  exec 3>&1
fi

# generate output
(
cat <<EOF
apiVersion: 'kustomize.config.k8s.io/v1beta1'
kind: 'Kustomization'
EOF

if [ ! -z $ns ]; then
  cat <<EOF
namespace: '${ns}'
EOF
fi

cat <<EOF
namePrefix: '${name}-'
commonLabels:
  app.kubernetes.io/name: 'postgres'
  app.kubernetes.io/instance: 'postgres-${name}'
  app.kubernetes.io/part-of: 'postgres-${name}'
  app.kubernetes.io/managed-by: 'launchcpx'
bases:
  - 'github.com/xorkevin/launchcpx//base/postgres'
secretGenerator:
  - name: postgres-pass
    files:
      - password=${passfile}
    type: Opaque
EOF

if [ ! -z $configfiles ]; then
  cat <<EOF
configMapGenerator:
  - name: 'postgres-initscripts'
    files:
EOF
  for file in $configfiles; do
    echo "      - '${file}'"
  done
fi
) 1>&3

exec 3>&-
